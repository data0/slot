data(mtcars)
library("dplyr")
library("ggplot2")
library("GGally")
library("psych")
ggpairs(mtcars)
library("memisc") # две и более регрессий в одной табличке
library("dplyr") # манипуляции с данными
library("psych") # описательные статистики
library("lmtest") # тестирование гипотез в линейных моделях
install.packages(c("memisc", "lmtest"))
memisc
library("memisc") # две и более регрессий в одной табличке
library("memisc") # две и более регрессий в одной табличке
library("dplyr") # манипуляции с данными
library("psych") # описательные статистики
library("lmtest") # тестирование гипотез в линейных моделях
install.packages("lmtest")
lmtest
library("lmtest") # тестирование гипотез в линейных моделях
library("sjPlot") # графики
install.packages("sjPlot")
sjPlot
sjPlot
library("lmtest") # тестирование гипотез в линейных моделях
library("sjPlot") # графики
library("sgof")
install.packages("sgof")
library("ggplot2") # графики
library("foreign") # загрузка данных в разных форматах
library("car")
library("hexbin") # графики
install.packages("hexbin")
library("rlms") # загрузка данных в формате rlms (spss)
install.packages("rlms")
library("memisc") # две и более регрессий в одной табличке
library("dplyr") # манипуляции с данными
library("psych") # описательные статистики
library("lmtest") # тестирование гипотез в линейных моделях
library("sjPlot") # графики
library("sgof")
library("ggplot2") # графики
library("foreign") # загрузка данных в разных форматах
library("car")
library("hexbin") # графики
library("rlms") # загрузка данных в формате rlms (spss)
install.packages("rlms")
install.packages("rmls")
20-qt(0.95,60)*5
20+qt(0.95,60)*5
3-qt(0.95,27)*0.5
3+qt(0.95,27)*0.5
round(3-qt(0.95,27)*0.5,digits = 2)
round(3+qt(0.95,27)*0.5,digits = 2)
round(-3-qt(0.95,27)*0.5,digits = 2)
round(-3+qt(0.95,27)*0.5,digits = 2)
q
pt(4,2)
round(pt(4,2), digits = 2)
pt
model <- lm(data=mtcars, mpg~hp+wt+am)
summary(model)
str(model)
df <-diamonds
df
model <- lm(data=mtcars, mpg~hp+wt+am)glimps()
glimps(df)
glimpse(df)
min(df$price)
table(df$cut = "Very Good")
table(df$cut == "Very Good")
table(df$cut)
model <- glm(data=df, price~0+carat)
summary(model)
model
model <- glm(data=df, price~carat)
summary(model)
model <- lm(data=df, price~carat)
summary(model)
glimpse(df)
model <- lm(data=df, price~carat+x+y)
summary(model)
model <- lm(data=df, price~carat)
summary(model)
model <- lm(data=df, price~carat+x+y)
summary(model)
model <- lm(data=df, price~carat+y+x)
summary(model)
coeftest(model)
confint(model)
confint(model, level = 0.05)
confint(model, level = 0.005)
confint(model, level = 0.95)
confint(model, level = 0.90)
help
help diamonds
help(diamonds)
confint(model, level = 0.90)
sjp.lm(model)
qt(0.95,27)
table(df$cut)
table(df$cut==1)
qt(0.995,53940-4)
2-2*pt(qt(0.995,53940-4),53940-4)
model <- lm(data=df, price~carat+y+x)
summary(model)
round(5-qt(0.95,27)*0.5,digits = 2)
round(5+qt(0.95,27)*0.5,digits = 2)
coef(model)
table(df$cut)
model <- glm(data=df, price~carat)
summary(model)
model <- lm(data=df, price~carat+y+x+z)
summary(model)
model <- lm(data=df, price~carat+y+x)
summary(model)
coeftest(model)
confint(model)
confint(model, level = 0.95)
confint(model, level = 0.9)
10-qt(0.975,30)*5
10+qt(0.975,30)*5
pnorm(9,mean = 7, sd = 2)
model <- lm(data=df, price~carat+x+y)
summary(model)
coeftest(model)
model <- lm(data=df, price~carat+x+y)
summary(model)
coeftest(model)
confint(model, , level = 0.9)
df <-diamonds
glimpse(df)
df_st <- mutate_each(df, "scale")
df_st <- mutate_each(df, "scale", na.omit=TRUE)
df_st <- mutate_each(df, "scale", na.rm=TRUE)
df <- mtcars
df_st <- mutate_each(df, "scale")
glimpse(df_st)
model_st <- lm(data=df_st, y~x+y)
model_st <- lm(data=df_st, mpg~cyl+disp)
summary(model_st)
sjp.lm(model_st, showStandardBeta = TRUE)
library("sjPlot") # графики
sjp.lm(model_st, showStandardBeta = TRUE)
sjp.lm(model_st)
sjp.lm(model)
sjp.lm(model_st)
help(sjp.lm)
sjp.lm(model_st, showPValueLabels = TRUE, showModelSummary = TRUE)
model <- lm(data=df, mpg~cyl+disp)
model1 <- lm(data=df, mpg~cyl+disp+gear)
df_st <- mutate_each(df, "scale")
model_st <- lm(data=df_st, mpg~cyl+disp)
compar_models <- mtable(model, model1, model_st)
compar_models
install.packages("KernSmooth")
load KernSmooth
load(KernSmooth)
load("KernSmooth")
package_version(KernSmooth)
package_version('KernSmooth')
library("KernSmooth")
library("KernSmooth")
library("KernSmooth")
search()
?KernSmooth
help(KernSmooth)
help("KernSmooth")
??KernSmooth
?ggplot2
library(ggplot2)
search()
library("KernSmooth")
search()
?select
library(dplyr)
?select
library(swirl)
install_from_swirl("Exploratory Data Analysis")
gl(2, 8, labels = c("Control", "Treat"))
?Devices
dev.cur()
x<-rand(100)
x<-nrand(100)
x<-norm(100)
x<-rnorm(100)
y<-rnorm(100)
plot(x,y)
dev.cur()
library(nlme)
library(lattice)
xyplot(weight ~ Time | Diet, BodyWeight)
BodyWeight
?panel.lmline()
library(lattice)
library(datasets)
data(airquality)
p <- xyplot(Ozone ~ Wind | factor(Month), data = airquality)
p
library(datasets)
data(airquality)
airquality
qplot(Wind, Ozone, data = airquality, geom = "smooth")
library(ggplot2)
qplot(Wind, Ozone, data = airquality, geom = "smooth")
qplot(Wind, Ozone, data = airquality, facets = . ~ factor(Month))
airquality = transform(airquality, Month = factor(Month))
qplot(Wind, Ozone, data = airquality, facets = . ~ Month)
?transform
qplot(Wind, Ozone, data = airquality)
airquality = transform(airquality, Month = factor(Month))
qplot(Wind, Ozone, data = airquality, facets = . ~ Month)
library(ggplot2)
g <- ggplot(movies, aes(votes, rating))
print(g)vvvvvvvvvvvvv
library(ggplot2)
g <- ggplot(movies, aes(votes, rating))
print(g)
movies
head(movies)
library(ggplot2)
g <- ggplot(movies, aes(votes, rating))
print(g)
aes(votes, rating)
?aes
qplot(votes, rating, data = movies)
qplot(votes, rating, data = movies, smooth = "loess")
qplot(votes, rating, data = movies, panel = panel.loess)
qplot(votes, rating, data = movies) + geom_smooth()
qplot(votes, rating, data = movies) + stats_smooth("loess")
library(ggplot2)
qplot(votes, rating, data = movies) + stats_smooth("loess")
qplot(votes, rating, data = movies) + geom_smooth()
qplot(votes, rating, data = movies), geom=c("point", "smooth")
qplot(votes, rating, data = movies, geom=c("point", "smooth") )
example(points)
dir()
(1:5)
(1:5:2)
(1:6:2)
(1:10:2)
(1:10:3)
(1:2:10)
145232%100
145232 .%. 100
3 %% 2
4 %% 2
145232 %% 20000
145232 / 20000
paste("xgboost_submission",3,".csv", sep="")
require(installr)
install.packages("installr"); require(installr)
install.packages("installr")
library(devtools)
install.packages("devtools")
library(devtools)
install.packages("devtools")
install.packages("devtools")
install.packages("devtools")
library(devtools)
install_github("shiny","ramnathv")
sessionInfo()
library(shiny)
sessionInfo()
install.packages("shiny")
sessionInfo()
library(shiny)
sessionInfo()
runApp()
runApp("~/work/r/datasci")
runApp("~/work/r/datasci")
install.packages("shinyapps")
devtools::install_github("rstudio/shinyapps")
library(shinyapps)
shinyapps::setAccountInfo(name='data0', token='309332CED267A996896B29C0FC4A5CDA', secret='nwQupnGsbf7ZQJyP2SUbELxlq8tBOaA77qG+Ut+A')
getwd()
setdw("~/work/r/datasci")
setwd("~/work/r/datasci")
getwd()
deployApp()
install_github("slidify","ramnathv")
devtools::install_github("slidify","ramnathv")
library(slidify)
library(slidifyLibraries)
devtools::install_github("slidifyLibraries","ramnathv")
getwd()
deployApp()
deployApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
deployApp()
deployApp()
runApp()
runApp()
deployApp()
slot1="Heads-Heads-Heads"
slot2="Heads-Heads-Tails"
slot3="Heads-Tails-Heads"
slot4="Heads-Tails-Tails"
slot5="Tails-Heads-Heads"
slot6="Tails-Heads-Tails"
slot7="Tails-Tails-Heads"
slot8="Tails-Tails-Tails"
player1=c(slot1,slot2,slot3,slot4,slot5,slot6,slot7,slot8)
player2=c(slot1,slot2,slot3,slot4,slot5,slot6,slot7,slot8)
winningTable=matrix(c(player1, player2), nrow=8, ncol=2)
colnames(winningTable)=c("Player A","Player B")
as.table(winningTable)
print("Optimal player B's strategy")
slot1="Heads-Heads-Heads"
slot2="Heads-Heads-Tails"
slot3="Heads-Tails-Heads"
slot4="Heads-Tails-Tails"
slot5="Tails-Heads-Heads"
slot6="Tails-Heads-Tails"
slot7="Tails-Tails-Heads"
slot8="Tails-Tails-Tails"
player1=c(slot1,slot2,slot3,slot4,slot5,slot6,slot7,slot8)
player2=c(slot1,slot2,slot3,slot4,slot5,slot6,slot7,slot8)
winningTable=matrix(c(player1, player2), nrow=8, ncol=2)
colnames(winningTable)=c("Player A","Player B")
as.table(winningTable)
cat("Optimal player B's strategy")
slot1="Heads-Heads-Heads"
slot2="Heads-Heads-Tails"
slot3="Heads-Tails-Heads"
slot4="Heads-Tails-Tails"
slot5="Tails-Heads-Heads"
slot6="Tails-Heads-Tails"
slot7="Tails-Tails-Heads"
slot8="Tails-Tails-Tails"
player1=c(slot1,slot2,slot3,slot4,slot5,slot6,slot7,slot8)
player2=c(slot1,slot2,slot3,slot4,slot5,slot6,slot7,slot8)
winningTable=matrix(c(player1, player2), nrow=8, ncol=2)
colnames(winningTable)=c("Player A","Player B")
as.table(winningTable)
n <- 100
x <- rnorm(n)
y <- 2*x + rnorm(n)
out <- lm(y ~ x)
library(xtable)
tab <- xtable(summary(out)$coef, digits=c(0, 2, 2, 1, 2))
print(tab, type="html")
slotA1="Heads-Heads-Heads"
splitSeqPlayerA=strsplit(SlotA1, split="-")
splitSeqPlayerA=strsplit(slotA1, split="-")
splitSeqPlayerA
splitSeqPlayerA[1]
splitSeqPlayerA[1,1]
splitSeqPlayerA[[1]]
str(splitSeqPlayerA)
unlist(splitSeqPlayerA)
unlist(splitSeqPlayerA)[1]
unlist(splitSeqPlayerA)[2]
unlist(splitSeqPlayerA)[3]
splitSeqPlayerA=unlist(strsplit(slotA1, split="-"))
paste(splitSeqPlayerA[1], splitSeqPlayerA[2], sep="-")
getwd()
setwd("~/work/r/data0")
author("slot")
author("slot")
